function [ classes ] = svm_test(test_data, n_classes, model_files)
%SVM_TEST Test SVM model
%
%   test_data = row vector of test data
%   n_classes = number of classes
%   model_files = model files generated by svm_train()
%
    
    % SVM commands
    % svm_test -no -ae -am -oa <result.txt> <model.txt> <test.txt>
    svm_test = 'svm/svm_test -no -ae -am -oa %s %s %s';
    
    % Fetch some info about test data
    n_data = size(test_data, 1);
    dim = size(test_data(1,:), 2);
    
    % Construct discriminant functions for each pair of classes
    pairs = nchoosek(1:n_classes, 2);
    n_pairs = size(pairs, 1);
    
    
    % Write test data to file
    %   n_data dim
    %   x1 x2 ... xdim
    %   ...
    test_file = 'svm/data/test.tmp.txt';
    fid = fopen(test_file, 'w');
    
    fprintf(fid, '%d %d\n', n_data, dim);
    
    for t=test_data'
        s = sprintf('%d ', t);
        fprintf(fid, '%s\n', s);
    end
    
    fclose(fid);
    printf('Wrote test examples to %s\n', test_file);
    
    
    % Create a matrix for storing the results
    results = zeros(n_data, n_pairs);
    
    % Iterate through each pair
    for i=1:n_pairs
        pair = pairs(i,:);
        model_file = model_files{i};
        
        result_file = 'svm/data/result.tmp.txt';
        cmd = sprintf(svm_test, result_file, model_file, test_file);
        [status, output] = unix(cmd);
        
        r = load(result_file);
        for j=1:n_data
            if r(j) >= 0
                c = pair(1);
            else
                c = pair(2);
            end
            
            results(j, i) = c;
        end
    end
    
    classes = zeros(n_data, 1);
    
    for i=1:n_data
        % Calculate frequencies of each class (# of votes)
        freqs = histc(results(i,:), 1:n_classes);
        [m, c] = max(freqs);
        classes(i) = c;
    end
end

